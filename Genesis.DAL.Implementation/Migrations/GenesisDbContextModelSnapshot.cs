// <auto-generated />
using System;
using Genesis.DAL.Implementation.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Genesis.DAL.Implementation.Migrations
{
    [DbContext(typeof(GenesisDbContext))]
    partial class GenesisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountDtoGenealogicalTreeDto", b =>
                {
                    b.Property<int>("AvailableTreesId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiersId")
                        .HasColumnType("int");

                    b.HasKey("AvailableTreesId", "ModifiersId");

                    b.HasIndex("ModifiersId");

                    b.ToTable("trees_modifiers", (string)null);
                });

            modelBuilder.Entity("AccountDtoRoleDto", b =>
                {
                    b.Property<int>("AccountsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("persons_roles", (string)null);
                });

            modelBuilder.Entity("BiographyDtoHistoricalNotationDto", b =>
                {
                    b.Property<int>("BiographiesId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("BiographiesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("events_biographies", (string)null);
                });

            modelBuilder.Entity("DocumentDtoPersonDto", b =>
                {
                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedDocumentsId")
                        .HasColumnType("int");

                    b.HasKey("PersonsId", "RelatedDocumentsId");

                    b.HasIndex("RelatedDocumentsId");

                    b.ToTable("persons_documents", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.AccountConnectionDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountFromId")
                        .HasColumnType("int");

                    b.Property<int>("AccountToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.ToTable("account_connections", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.AccountDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.RefreshTokenDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.RoleDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "ArchiveWorker"
                        });
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.AddressDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.BiographyDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedByAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeathPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("DeathPlaceId");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("biographies", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.DocumentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChangedByAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoricalNotationId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalNotationId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChangedByAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("genealogical_trees", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChangedByAccount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("notations", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PersonDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedByAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<int?>("GenealogicalTreeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLinkToAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GenealogicalTreeId");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PersonRelationDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromPersonId")
                        .HasColumnType("int");

                    b.Property<int>("GenealogicalTreeId")
                        .HasColumnType("int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.Property<int>("ToPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromPersonId");

                    b.HasIndex("GenealogicalTreeId");

                    b.HasIndex("ToPersonId");

                    b.ToTable("relations", (string)null);
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PictureDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenealogicalTreeId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoricalNotationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenealogicalTreeId")
                        .IsUnique()
                        .HasFilter("[GenealogicalTreeId] IS NOT NULL");

                    b.HasIndex("HistoricalNotationId");

                    b.HasIndex("PersonId");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("AccountDtoGenealogicalTreeDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", null)
                        .WithMany()
                        .HasForeignKey("AvailableTreesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", null)
                        .WithMany()
                        .HasForeignKey("ModifiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountDtoRoleDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.RoleDto", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiographyDtoHistoricalNotationDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.BiographyDto", null)
                        .WithMany()
                        .HasForeignKey("BiographiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentDtoPersonDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.PersonDto", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.DocumentDto", null)
                        .WithMany()
                        .HasForeignKey("RelatedDocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.AccountConnectionDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", "AccountFrom")
                        .WithMany("OutgoingConnections")
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", "AccountTo")
                        .WithMany("IncomingConnections")
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.RefreshTokenDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.BiographyDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.AddressDto", "BirthPlace")
                        .WithMany("BirthdayAttachedBiographies")
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("Genesis.DAL.Contract.Dtos.AddressDto", "DeathPlace")
                        .WithMany("DayOfDeathAttachedBiographies")
                        .HasForeignKey("DeathPlaceId");

                    b.HasOne("Genesis.DAL.Contract.Dtos.PersonDto", "Person")
                        .WithOne("Biography")
                        .HasForeignKey("Genesis.DAL.Contract.Dtos.BiographyDto", "PersonId");

                    b.Navigation("BirthPlace");

                    b.Navigation("DeathPlace");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.DocumentDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", "HistoricalNotation")
                        .WithMany("Documents")
                        .HasForeignKey("HistoricalNotationId");

                    b.Navigation("HistoricalNotation");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", "Owner")
                        .WithMany("PersonalTrees")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.AddressDto", "Place")
                        .WithMany("Notations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PersonDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.Account.AccountDto", "Account")
                        .WithMany("OwnedPersons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", "GenealogicalTree")
                        .WithMany("Persons")
                        .HasForeignKey("GenealogicalTreeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("GenealogicalTree");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PersonRelationDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.PersonDto", "FromPerson")
                        .WithMany("RelationsAsRoot")
                        .HasForeignKey("FromPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", "GenealogicalTree")
                        .WithMany("Relations")
                        .HasForeignKey("GenealogicalTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genesis.DAL.Contract.Dtos.PersonDto", "ToPerson")
                        .WithMany("RelationsAsDependent")
                        .HasForeignKey("ToPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromPerson");

                    b.Navigation("GenealogicalTree");

                    b.Navigation("ToPerson");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PictureDto", b =>
                {
                    b.HasOne("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", "GenealogicalTree")
                        .WithOne("CoatOfArms")
                        .HasForeignKey("Genesis.DAL.Contract.Dtos.PictureDto", "GenealogicalTreeId");

                    b.HasOne("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", "HistoricalNotation")
                        .WithMany("Pictures")
                        .HasForeignKey("HistoricalNotationId");

                    b.HasOne("Genesis.DAL.Contract.Dtos.PersonDto", "Person")
                        .WithMany("Photos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GenealogicalTree");

                    b.Navigation("HistoricalNotation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.Account.AccountDto", b =>
                {
                    b.Navigation("IncomingConnections");

                    b.Navigation("OutgoingConnections");

                    b.Navigation("OwnedPersons");

                    b.Navigation("PersonalTrees");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.AddressDto", b =>
                {
                    b.Navigation("BirthdayAttachedBiographies");

                    b.Navigation("DayOfDeathAttachedBiographies");

                    b.Navigation("Notations");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.GenealogicalTreeDto", b =>
                {
                    b.Navigation("CoatOfArms");

                    b.Navigation("Persons");

                    b.Navigation("Relations");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.HistoricalNotationDto", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Genesis.DAL.Contract.Dtos.PersonDto", b =>
                {
                    b.Navigation("Biography");

                    b.Navigation("Photos");

                    b.Navigation("RelationsAsDependent");

                    b.Navigation("RelationsAsRoot");
                });
#pragma warning restore 612, 618
        }
    }
}
